// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Institution {
  id       String    @id @default(cuid())
  name     String
  site     String?
  speakers Speaker[]
}

model Speaker {
  id              String           @id @default(cuid())
  name            String
  role            String?
  picture         String?
  institution     Institution?     @relation(fields: [institutionId], references: [id], onDelete: SetNull)
  institutionId   String?
  episodes        Episode[]
  questions       Question[]
  dares           Dare[]
  dareDraws       DareDraw[]
  questionDraws   QuestionDraw[]
  questionUpvotes QuestionUpvote[]

  @@index([institutionId])
}

model Application {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  episode   Episode @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  episodeId String
  status    Boolean @default(false)

  @@unique([userId, episodeId])
  @@index([episodeId, userId])
}

model Episode {
  id            String         @id @default(cuid())
  title         String         @unique
  slug          String         @unique
  date          DateTime?
  banner        String?
  thumbnail     String?
  season        Season         @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  seasonId      String
  applications  Application[]
  speakers      Speaker[]
  dareDraws     DareDraw[]
  questionDraws QuestionDraw[]

  @@index([seasonId])
}

model Season {
  id       String    @id @default(cuid())
  title    String
  episodes Episode[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  company         String?
  role            String?
  twitter         String?
  github          String?
  linkedin        String?
  other           String?
  applications    Application[]
  questionUpvotes QuestionUpvote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Question {
  id       String           @id @default(cuid())
  speakers Speaker[]
  text     String?          @db.Text
  draws    QuestionDraw[]
  upvotes  QuestionUpvote[]
}

model QuestionDraw {
  id         String   @id @default(cuid())
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  datetime   DateTime
  Episode    Episode  @relation(fields: [episodeId], references: [id])
  episodeId  String
  Speaker    Speaker  @relation(fields: [speakerId], references: [id])
  speakerId  String
}

model QuestionUpvote {
  id         String   @id @default(cuid())
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  speaker    Speaker  @relation(fields: [speakerId], references: [id], onDelete: Cascade)
  speakerId  String
  datetime   DateTime
  deleted    DateTime @default("1970-01-01T00:00:00.000Z")

  @@unique([questionId, userId, speakerId, deleted])
}

model Dare {
  id       String     @id @default(cuid())
  speakers Speaker[]
  text     String?    @db.Text
  draws    DareDraw[]
}

model DareDraw {
  id        String   @id @default(cuid())
  dare      Dare     @relation(fields: [dareId], references: [id], onDelete: Cascade)
  dareId    String
  speaker   Speaker  @relation(fields: [speakerId], references: [id], onDelete: Cascade)
  speakerId String
  episode   Episode  @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  episodeId String
  datetime  DateTime
}
