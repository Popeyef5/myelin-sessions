// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Institution {
  id       String    @id @default(cuid())
  name     String
  site     String?
  speakers Speaker[]
}

model Speaker {
  id            String       @id @default(cuid())
  name          String
  role          String?
  picture       String?
  institution   Institution? @relation(fields: [institutionId], references: [id], onDelete: SetNull)
  institutionId String?
  episodes      Episode[]

  @@index([institutionId])
}

model Application {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  episode   Episode @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  episodeId String
  status    Boolean @default(false)

  @@unique([userId, episodeId])
  @@index([episodeId, userId])
}

model Episode {
  id           String        @id @default(cuid())
  title        String        @unique
  slug         String        @unique
  date         DateTime?
  banner       String?
  thumbnail    String?
  season       Season        @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  seasonId     String
  applications Application[]
  speakers     Speaker[]

  @@index([seasonId])
}

model Season {
  id       String    @id @default(cuid())
  title    String
  episodes Episode[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  company       String?
  role          String?
  twitter       String?
  github        String?
  linkedin      String?
  other         String?
  applications  Application[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
